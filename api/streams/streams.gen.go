// Copyright 2025 Circle Internet Group, Inc.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Package streams provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package streams

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	X_api_keyScopes = "x_api_key.Scopes"
)

// Defines values for CreateStreamDtoDataset.
const (
	CreateStreamDtoDatasetBlock                       CreateStreamDtoDataset = "block"
	CreateStreamDtoDatasetBlockWithReceipts           CreateStreamDtoDataset = "block_with_receipts"
	CreateStreamDtoDatasetBlockWithReceiptsDebugTrace CreateStreamDtoDataset = "block_with_receipts_debug_trace"
	CreateStreamDtoDatasetBlockWithReceiptsTraceBlock CreateStreamDtoDataset = "block_with_receipts_trace_block"
	CreateStreamDtoDatasetDebugTraces                 CreateStreamDtoDataset = "debug_traces"
	CreateStreamDtoDatasetLedger                      CreateStreamDtoDataset = "ledger"
	CreateStreamDtoDatasetLogs                        CreateStreamDtoDataset = "logs"
	CreateStreamDtoDatasetProgramsWithLogs            CreateStreamDtoDataset = "programs_with_logs"
	CreateStreamDtoDatasetReceipts                    CreateStreamDtoDataset = "receipts"
	CreateStreamDtoDatasetTraceBlocks                 CreateStreamDtoDataset = "trace_blocks"
	CreateStreamDtoDatasetTransactions                CreateStreamDtoDataset = "transactions"
)

// Defines values for CreateStreamDtoDestination.
const (
	CreateStreamDtoDestinationFunction CreateStreamDtoDestination = "function"
	CreateStreamDtoDestinationPostgres CreateStreamDtoDestination = "postgres"
	CreateStreamDtoDestinationS3       CreateStreamDtoDestination = "s3"
	CreateStreamDtoDestinationWebhook  CreateStreamDtoDestination = "webhook"
)

// Defines values for CreateStreamDtoIncludeStreamMetadata.
const (
	CreateStreamDtoIncludeStreamMetadataBody   CreateStreamDtoIncludeStreamMetadata = "body"
	CreateStreamDtoIncludeStreamMetadataHeader CreateStreamDtoIncludeStreamMetadata = "header"
	CreateStreamDtoIncludeStreamMetadataNone   CreateStreamDtoIncludeStreamMetadata = "none"
)

// Defines values for CreateStreamDtoNetwork.
const (
	CreateStreamDtoNetworkAbstractMainnet    CreateStreamDtoNetwork = "abstract-mainnet"
	CreateStreamDtoNetworkAbstractTestnet    CreateStreamDtoNetwork = "abstract-testnet"
	CreateStreamDtoNetworkArbitrumMainnet    CreateStreamDtoNetwork = "arbitrum-mainnet"
	CreateStreamDtoNetworkArbitrumSepolia    CreateStreamDtoNetwork = "arbitrum-sepolia"
	CreateStreamDtoNetworkAvalancheFuji      CreateStreamDtoNetwork = "avalanche-fuji"
	CreateStreamDtoNetworkAvalancheMainnet   CreateStreamDtoNetwork = "avalanche-mainnet"
	CreateStreamDtoNetworkB3Mainnet          CreateStreamDtoNetwork = "b3-mainnet"
	CreateStreamDtoNetworkB3Sepolia          CreateStreamDtoNetwork = "b3-sepolia"
	CreateStreamDtoNetworkBaseMainnet        CreateStreamDtoNetwork = "base-mainnet"
	CreateStreamDtoNetworkBaseSepolia        CreateStreamDtoNetwork = "base-sepolia"
	CreateStreamDtoNetworkBeraBepolia        CreateStreamDtoNetwork = "bera-bepolia"
	CreateStreamDtoNetworkBeraMainnet        CreateStreamDtoNetwork = "bera-mainnet"
	CreateStreamDtoNetworkBitcoinMainnet     CreateStreamDtoNetwork = "bitcoin-mainnet"
	CreateStreamDtoNetworkBlastMainnet       CreateStreamDtoNetwork = "blast-mainnet"
	CreateStreamDtoNetworkBlastSepolia       CreateStreamDtoNetwork = "blast-sepolia"
	CreateStreamDtoNetworkBnbchainMainnet    CreateStreamDtoNetwork = "bnbchain-mainnet"
	CreateStreamDtoNetworkBnbchainTestnet    CreateStreamDtoNetwork = "bnbchain-testnet"
	CreateStreamDtoNetworkCeloMainnet        CreateStreamDtoNetwork = "celo-mainnet"
	CreateStreamDtoNetworkCyberMainnet       CreateStreamDtoNetwork = "cyber-mainnet"
	CreateStreamDtoNetworkCyberSepolia       CreateStreamDtoNetwork = "cyber-sepolia"
	CreateStreamDtoNetworkEthereumHolesky    CreateStreamDtoNetwork = "ethereum-holesky"
	CreateStreamDtoNetworkEthereumHoodi      CreateStreamDtoNetwork = "ethereum-hoodi"
	CreateStreamDtoNetworkEthereumMainnet    CreateStreamDtoNetwork = "ethereum-mainnet"
	CreateStreamDtoNetworkEthereumSepolia    CreateStreamDtoNetwork = "ethereum-sepolia"
	CreateStreamDtoNetworkFantomMainnet      CreateStreamDtoNetwork = "fantom-mainnet"
	CreateStreamDtoNetworkFlowMainnet        CreateStreamDtoNetwork = "flow-mainnet"
	CreateStreamDtoNetworkFlowTestnet        CreateStreamDtoNetwork = "flow-testnet"
	CreateStreamDtoNetworkGnosisMainnet      CreateStreamDtoNetwork = "gnosis-mainnet"
	CreateStreamDtoNetworkGravityAlpham      CreateStreamDtoNetwork = "gravity-alpham"
	CreateStreamDtoNetworkHederaMainnet      CreateStreamDtoNetwork = "hedera-mainnet"
	CreateStreamDtoNetworkHederaTestnet      CreateStreamDtoNetwork = "hedera-testnet"
	CreateStreamDtoNetworkHemiMainnet        CreateStreamDtoNetwork = "hemi-mainnet"
	CreateStreamDtoNetworkHemiTestnet        CreateStreamDtoNetwork = "hemi-testnet"
	CreateStreamDtoNetworkHyperliquidMainnet CreateStreamDtoNetwork = "hyperliquid-mainnet"
	CreateStreamDtoNetworkImxMainnet         CreateStreamDtoNetwork = "imx-mainnet"
	CreateStreamDtoNetworkImxTestnet         CreateStreamDtoNetwork = "imx-testnet"
	CreateStreamDtoNetworkInjectiveMainnet   CreateStreamDtoNetwork = "injective-mainnet"
	CreateStreamDtoNetworkInjectiveTestnet   CreateStreamDtoNetwork = "injective-testnet"
	CreateStreamDtoNetworkInkMainnet         CreateStreamDtoNetwork = "ink-mainnet"
	CreateStreamDtoNetworkInkSepolia         CreateStreamDtoNetwork = "ink-sepolia"
	CreateStreamDtoNetworkJocMainnet         CreateStreamDtoNetwork = "joc-mainnet"
	CreateStreamDtoNetworkKaiaMainnet        CreateStreamDtoNetwork = "kaia-mainnet"
	CreateStreamDtoNetworkKaiaTestnet        CreateStreamDtoNetwork = "kaia-testnet"
	CreateStreamDtoNetworkLensMainnet        CreateStreamDtoNetwork = "lens-mainnet"
	CreateStreamDtoNetworkLensTestnet        CreateStreamDtoNetwork = "lens-testnet"
	CreateStreamDtoNetworkLineaMainnet       CreateStreamDtoNetwork = "linea-mainnet"
	CreateStreamDtoNetworkMantleMainnet      CreateStreamDtoNetwork = "mantle-mainnet"
	CreateStreamDtoNetworkMantleSepolia      CreateStreamDtoNetwork = "mantle-sepolia"
	CreateStreamDtoNetworkMonadTestnet       CreateStreamDtoNetwork = "monad-testnet"
	CreateStreamDtoNetworkMorphHolesky       CreateStreamDtoNetwork = "morph-holesky"
	CreateStreamDtoNetworkMorphMainnet       CreateStreamDtoNetwork = "morph-mainnet"
	CreateStreamDtoNetworkNovaMainnet        CreateStreamDtoNetwork = "nova-mainnet"
	CreateStreamDtoNetworkOmniMainnet        CreateStreamDtoNetwork = "omni-mainnet"
	CreateStreamDtoNetworkOmniOmega          CreateStreamDtoNetwork = "omni-omega"
	CreateStreamDtoNetworkOptimismMainnet    CreateStreamDtoNetwork = "optimism-mainnet"
	CreateStreamDtoNetworkOptimismSepolia    CreateStreamDtoNetwork = "optimism-sepolia"
	CreateStreamDtoNetworkPeaqMainnet        CreateStreamDtoNetwork = "peaq-mainnet"
	CreateStreamDtoNetworkPlasmaTestnet      CreateStreamDtoNetwork = "plasma-testnet"
	CreateStreamDtoNetworkPolygonAmoy        CreateStreamDtoNetwork = "polygon-amoy"
	CreateStreamDtoNetworkPolygonMainnet     CreateStreamDtoNetwork = "polygon-mainnet"
	CreateStreamDtoNetworkRaceMainnet        CreateStreamDtoNetwork = "race-mainnet"
	CreateStreamDtoNetworkRaceTestnet        CreateStreamDtoNetwork = "race-testnet"
	CreateStreamDtoNetworkSaharaTestnet      CreateStreamDtoNetwork = "sahara-testnet"
	CreateStreamDtoNetworkScrollMainnet      CreateStreamDtoNetwork = "scroll-mainnet"
	CreateStreamDtoNetworkScrollTestnet      CreateStreamDtoNetwork = "scroll-testnet"
	CreateStreamDtoNetworkSeiMainnet         CreateStreamDtoNetwork = "sei-mainnet"
	CreateStreamDtoNetworkSeiTestnet         CreateStreamDtoNetwork = "sei-testnet"
	CreateStreamDtoNetworkSolanaDevnet       CreateStreamDtoNetwork = "solana-devnet"
	CreateStreamDtoNetworkSolanaMainnet      CreateStreamDtoNetwork = "solana-mainnet"
	CreateStreamDtoNetworkSolanaTestnet      CreateStreamDtoNetwork = "solana-testnet"
	CreateStreamDtoNetworkSoneiumMainnet     CreateStreamDtoNetwork = "soneium-mainnet"
	CreateStreamDtoNetworkSonicMainnet       CreateStreamDtoNetwork = "sonic-mainnet"
	CreateStreamDtoNetworkSophonMainnet      CreateStreamDtoNetwork = "sophon-mainnet"
	CreateStreamDtoNetworkSophonTestnet      CreateStreamDtoNetwork = "sophon-testnet"
	CreateStreamDtoNetworkStoryAeneid        CreateStreamDtoNetwork = "story-aeneid"
	CreateStreamDtoNetworkStoryMainnet       CreateStreamDtoNetwork = "story-mainnet"
	CreateStreamDtoNetworkTronMainnet        CreateStreamDtoNetwork = "tron-mainnet"
	CreateStreamDtoNetworkUnichainMainnet    CreateStreamDtoNetwork = "unichain-mainnet"
	CreateStreamDtoNetworkUnichainSepolia    CreateStreamDtoNetwork = "unichain-sepolia"
	CreateStreamDtoNetworkVanaMainnet        CreateStreamDtoNetwork = "vana-mainnet"
	CreateStreamDtoNetworkVanaMoksha         CreateStreamDtoNetwork = "vana-moksha"
	CreateStreamDtoNetworkWorldchainMainnet  CreateStreamDtoNetwork = "worldchain-mainnet"
	CreateStreamDtoNetworkWorldchainSepolia  CreateStreamDtoNetwork = "worldchain-sepolia"
	CreateStreamDtoNetworkXaiMainnet         CreateStreamDtoNetwork = "xai-mainnet"
	CreateStreamDtoNetworkXaiSepolia         CreateStreamDtoNetwork = "xai-sepolia"
	CreateStreamDtoNetworkXrpMainnet         CreateStreamDtoNetwork = "xrp-mainnet"
	CreateStreamDtoNetworkXrpTestnet         CreateStreamDtoNetwork = "xrp-testnet"
	CreateStreamDtoNetworkZerogGalileo       CreateStreamDtoNetwork = "zerog-galileo"
	CreateStreamDtoNetworkZkevmCardona       CreateStreamDtoNetwork = "zkevm-cardona"
	CreateStreamDtoNetworkZkevmMainnet       CreateStreamDtoNetwork = "zkevm-mainnet"
	CreateStreamDtoNetworkZksyncMainnet      CreateStreamDtoNetwork = "zksync-mainnet"
	CreateStreamDtoNetworkZksyncSepolia      CreateStreamDtoNetwork = "zksync-sepolia"
	CreateStreamDtoNetworkZoraMainnet        CreateStreamDtoNetwork = "zora-mainnet"
)

// Defines values for CreateStreamDtoRegion.
const (
	AsiaEast      CreateStreamDtoRegion = "asia_east"
	EuropeCentral CreateStreamDtoRegion = "europe_central"
	UsaEast       CreateStreamDtoRegion = "usa_east"
)

// Defines values for CreateStreamDtoStatus.
const (
	CreateStreamDtoStatusActive     CreateStreamDtoStatus = "active"
	CreateStreamDtoStatusCompleted  CreateStreamDtoStatus = "completed"
	CreateStreamDtoStatusPaused     CreateStreamDtoStatus = "paused"
	CreateStreamDtoStatusTerminated CreateStreamDtoStatus = "terminated"
)

// Defines values for PostgresAttributesSslmode.
const (
	Disable PostgresAttributesSslmode = "disable"
	Require PostgresAttributesSslmode = "require"
)

// Defines values for S3AttributesFileType.
const (
	DotJson    S3AttributesFileType = ".json"
	DotParquet S3AttributesFileType = ".parquet"
)

// Defines values for TestFilterFunctionDtoDataset.
const (
	TestFilterFunctionDtoDatasetBlock                       TestFilterFunctionDtoDataset = "block"
	TestFilterFunctionDtoDatasetBlockWithReceipts           TestFilterFunctionDtoDataset = "block_with_receipts"
	TestFilterFunctionDtoDatasetBlockWithReceiptsDebugTrace TestFilterFunctionDtoDataset = "block_with_receipts_debug_trace"
	TestFilterFunctionDtoDatasetBlockWithReceiptsTraceBlock TestFilterFunctionDtoDataset = "block_with_receipts_trace_block"
	TestFilterFunctionDtoDatasetDebugTraces                 TestFilterFunctionDtoDataset = "debug_traces"
	TestFilterFunctionDtoDatasetLedger                      TestFilterFunctionDtoDataset = "ledger"
	TestFilterFunctionDtoDatasetLogs                        TestFilterFunctionDtoDataset = "logs"
	TestFilterFunctionDtoDatasetProgramsWithLogs            TestFilterFunctionDtoDataset = "programs_with_logs"
	TestFilterFunctionDtoDatasetReceipts                    TestFilterFunctionDtoDataset = "receipts"
	TestFilterFunctionDtoDatasetTraceBlocks                 TestFilterFunctionDtoDataset = "trace_blocks"
	TestFilterFunctionDtoDatasetTransactions                TestFilterFunctionDtoDataset = "transactions"
)

// Defines values for TestFilterFunctionDtoNetwork.
const (
	TestFilterFunctionDtoNetworkAbstractMainnet    TestFilterFunctionDtoNetwork = "abstract-mainnet"
	TestFilterFunctionDtoNetworkAbstractTestnet    TestFilterFunctionDtoNetwork = "abstract-testnet"
	TestFilterFunctionDtoNetworkArbitrumMainnet    TestFilterFunctionDtoNetwork = "arbitrum-mainnet"
	TestFilterFunctionDtoNetworkArbitrumSepolia    TestFilterFunctionDtoNetwork = "arbitrum-sepolia"
	TestFilterFunctionDtoNetworkAvalancheFuji      TestFilterFunctionDtoNetwork = "avalanche-fuji"
	TestFilterFunctionDtoNetworkAvalancheMainnet   TestFilterFunctionDtoNetwork = "avalanche-mainnet"
	TestFilterFunctionDtoNetworkB3Mainnet          TestFilterFunctionDtoNetwork = "b3-mainnet"
	TestFilterFunctionDtoNetworkB3Sepolia          TestFilterFunctionDtoNetwork = "b3-sepolia"
	TestFilterFunctionDtoNetworkBaseMainnet        TestFilterFunctionDtoNetwork = "base-mainnet"
	TestFilterFunctionDtoNetworkBaseSepolia        TestFilterFunctionDtoNetwork = "base-sepolia"
	TestFilterFunctionDtoNetworkBeraBepolia        TestFilterFunctionDtoNetwork = "bera-bepolia"
	TestFilterFunctionDtoNetworkBeraMainnet        TestFilterFunctionDtoNetwork = "bera-mainnet"
	TestFilterFunctionDtoNetworkBitcoinMainnet     TestFilterFunctionDtoNetwork = "bitcoin-mainnet"
	TestFilterFunctionDtoNetworkBlastMainnet       TestFilterFunctionDtoNetwork = "blast-mainnet"
	TestFilterFunctionDtoNetworkBlastSepolia       TestFilterFunctionDtoNetwork = "blast-sepolia"
	TestFilterFunctionDtoNetworkBnbchainMainnet    TestFilterFunctionDtoNetwork = "bnbchain-mainnet"
	TestFilterFunctionDtoNetworkBnbchainTestnet    TestFilterFunctionDtoNetwork = "bnbchain-testnet"
	TestFilterFunctionDtoNetworkCeloMainnet        TestFilterFunctionDtoNetwork = "celo-mainnet"
	TestFilterFunctionDtoNetworkCyberMainnet       TestFilterFunctionDtoNetwork = "cyber-mainnet"
	TestFilterFunctionDtoNetworkCyberSepolia       TestFilterFunctionDtoNetwork = "cyber-sepolia"
	TestFilterFunctionDtoNetworkEthereumHolesky    TestFilterFunctionDtoNetwork = "ethereum-holesky"
	TestFilterFunctionDtoNetworkEthereumHoodi      TestFilterFunctionDtoNetwork = "ethereum-hoodi"
	TestFilterFunctionDtoNetworkEthereumMainnet    TestFilterFunctionDtoNetwork = "ethereum-mainnet"
	TestFilterFunctionDtoNetworkEthereumSepolia    TestFilterFunctionDtoNetwork = "ethereum-sepolia"
	TestFilterFunctionDtoNetworkFantomMainnet      TestFilterFunctionDtoNetwork = "fantom-mainnet"
	TestFilterFunctionDtoNetworkFlowMainnet        TestFilterFunctionDtoNetwork = "flow-mainnet"
	TestFilterFunctionDtoNetworkFlowTestnet        TestFilterFunctionDtoNetwork = "flow-testnet"
	TestFilterFunctionDtoNetworkGnosisMainnet      TestFilterFunctionDtoNetwork = "gnosis-mainnet"
	TestFilterFunctionDtoNetworkGravityAlpham      TestFilterFunctionDtoNetwork = "gravity-alpham"
	TestFilterFunctionDtoNetworkHederaMainnet      TestFilterFunctionDtoNetwork = "hedera-mainnet"
	TestFilterFunctionDtoNetworkHederaTestnet      TestFilterFunctionDtoNetwork = "hedera-testnet"
	TestFilterFunctionDtoNetworkHemiMainnet        TestFilterFunctionDtoNetwork = "hemi-mainnet"
	TestFilterFunctionDtoNetworkHemiTestnet        TestFilterFunctionDtoNetwork = "hemi-testnet"
	TestFilterFunctionDtoNetworkHyperliquidMainnet TestFilterFunctionDtoNetwork = "hyperliquid-mainnet"
	TestFilterFunctionDtoNetworkImxMainnet         TestFilterFunctionDtoNetwork = "imx-mainnet"
	TestFilterFunctionDtoNetworkImxTestnet         TestFilterFunctionDtoNetwork = "imx-testnet"
	TestFilterFunctionDtoNetworkInjectiveMainnet   TestFilterFunctionDtoNetwork = "injective-mainnet"
	TestFilterFunctionDtoNetworkInjectiveTestnet   TestFilterFunctionDtoNetwork = "injective-testnet"
	TestFilterFunctionDtoNetworkInkMainnet         TestFilterFunctionDtoNetwork = "ink-mainnet"
	TestFilterFunctionDtoNetworkInkSepolia         TestFilterFunctionDtoNetwork = "ink-sepolia"
	TestFilterFunctionDtoNetworkJocMainnet         TestFilterFunctionDtoNetwork = "joc-mainnet"
	TestFilterFunctionDtoNetworkKaiaMainnet        TestFilterFunctionDtoNetwork = "kaia-mainnet"
	TestFilterFunctionDtoNetworkKaiaTestnet        TestFilterFunctionDtoNetwork = "kaia-testnet"
	TestFilterFunctionDtoNetworkLensMainnet        TestFilterFunctionDtoNetwork = "lens-mainnet"
	TestFilterFunctionDtoNetworkLensTestnet        TestFilterFunctionDtoNetwork = "lens-testnet"
	TestFilterFunctionDtoNetworkLineaMainnet       TestFilterFunctionDtoNetwork = "linea-mainnet"
	TestFilterFunctionDtoNetworkMantleMainnet      TestFilterFunctionDtoNetwork = "mantle-mainnet"
	TestFilterFunctionDtoNetworkMantleSepolia      TestFilterFunctionDtoNetwork = "mantle-sepolia"
	TestFilterFunctionDtoNetworkMonadTestnet       TestFilterFunctionDtoNetwork = "monad-testnet"
	TestFilterFunctionDtoNetworkMorphHolesky       TestFilterFunctionDtoNetwork = "morph-holesky"
	TestFilterFunctionDtoNetworkMorphMainnet       TestFilterFunctionDtoNetwork = "morph-mainnet"
	TestFilterFunctionDtoNetworkNovaMainnet        TestFilterFunctionDtoNetwork = "nova-mainnet"
	TestFilterFunctionDtoNetworkOmniMainnet        TestFilterFunctionDtoNetwork = "omni-mainnet"
	TestFilterFunctionDtoNetworkOmniOmega          TestFilterFunctionDtoNetwork = "omni-omega"
	TestFilterFunctionDtoNetworkOptimismMainnet    TestFilterFunctionDtoNetwork = "optimism-mainnet"
	TestFilterFunctionDtoNetworkOptimismSepolia    TestFilterFunctionDtoNetwork = "optimism-sepolia"
	TestFilterFunctionDtoNetworkPeaqMainnet        TestFilterFunctionDtoNetwork = "peaq-mainnet"
	TestFilterFunctionDtoNetworkPlasmaTestnet      TestFilterFunctionDtoNetwork = "plasma-testnet"
	TestFilterFunctionDtoNetworkPolygonAmoy        TestFilterFunctionDtoNetwork = "polygon-amoy"
	TestFilterFunctionDtoNetworkPolygonMainnet     TestFilterFunctionDtoNetwork = "polygon-mainnet"
	TestFilterFunctionDtoNetworkRaceMainnet        TestFilterFunctionDtoNetwork = "race-mainnet"
	TestFilterFunctionDtoNetworkRaceTestnet        TestFilterFunctionDtoNetwork = "race-testnet"
	TestFilterFunctionDtoNetworkSaharaTestnet      TestFilterFunctionDtoNetwork = "sahara-testnet"
	TestFilterFunctionDtoNetworkScrollMainnet      TestFilterFunctionDtoNetwork = "scroll-mainnet"
	TestFilterFunctionDtoNetworkScrollTestnet      TestFilterFunctionDtoNetwork = "scroll-testnet"
	TestFilterFunctionDtoNetworkSeiMainnet         TestFilterFunctionDtoNetwork = "sei-mainnet"
	TestFilterFunctionDtoNetworkSeiTestnet         TestFilterFunctionDtoNetwork = "sei-testnet"
	TestFilterFunctionDtoNetworkSolanaDevnet       TestFilterFunctionDtoNetwork = "solana-devnet"
	TestFilterFunctionDtoNetworkSolanaMainnet      TestFilterFunctionDtoNetwork = "solana-mainnet"
	TestFilterFunctionDtoNetworkSolanaTestnet      TestFilterFunctionDtoNetwork = "solana-testnet"
	TestFilterFunctionDtoNetworkSoneiumMainnet     TestFilterFunctionDtoNetwork = "soneium-mainnet"
	TestFilterFunctionDtoNetworkSonicMainnet       TestFilterFunctionDtoNetwork = "sonic-mainnet"
	TestFilterFunctionDtoNetworkSophonMainnet      TestFilterFunctionDtoNetwork = "sophon-mainnet"
	TestFilterFunctionDtoNetworkSophonTestnet      TestFilterFunctionDtoNetwork = "sophon-testnet"
	TestFilterFunctionDtoNetworkStoryAeneid        TestFilterFunctionDtoNetwork = "story-aeneid"
	TestFilterFunctionDtoNetworkStoryMainnet       TestFilterFunctionDtoNetwork = "story-mainnet"
	TestFilterFunctionDtoNetworkTronMainnet        TestFilterFunctionDtoNetwork = "tron-mainnet"
	TestFilterFunctionDtoNetworkUnichainMainnet    TestFilterFunctionDtoNetwork = "unichain-mainnet"
	TestFilterFunctionDtoNetworkUnichainSepolia    TestFilterFunctionDtoNetwork = "unichain-sepolia"
	TestFilterFunctionDtoNetworkVanaMainnet        TestFilterFunctionDtoNetwork = "vana-mainnet"
	TestFilterFunctionDtoNetworkVanaMoksha         TestFilterFunctionDtoNetwork = "vana-moksha"
	TestFilterFunctionDtoNetworkWorldchainMainnet  TestFilterFunctionDtoNetwork = "worldchain-mainnet"
	TestFilterFunctionDtoNetworkWorldchainSepolia  TestFilterFunctionDtoNetwork = "worldchain-sepolia"
	TestFilterFunctionDtoNetworkXaiMainnet         TestFilterFunctionDtoNetwork = "xai-mainnet"
	TestFilterFunctionDtoNetworkXaiSepolia         TestFilterFunctionDtoNetwork = "xai-sepolia"
	TestFilterFunctionDtoNetworkXrpMainnet         TestFilterFunctionDtoNetwork = "xrp-mainnet"
	TestFilterFunctionDtoNetworkXrpTestnet         TestFilterFunctionDtoNetwork = "xrp-testnet"
	TestFilterFunctionDtoNetworkZerogGalileo       TestFilterFunctionDtoNetwork = "zerog-galileo"
	TestFilterFunctionDtoNetworkZkevmCardona       TestFilterFunctionDtoNetwork = "zkevm-cardona"
	TestFilterFunctionDtoNetworkZkevmMainnet       TestFilterFunctionDtoNetwork = "zkevm-mainnet"
	TestFilterFunctionDtoNetworkZksyncMainnet      TestFilterFunctionDtoNetwork = "zksync-mainnet"
	TestFilterFunctionDtoNetworkZksyncSepolia      TestFilterFunctionDtoNetwork = "zksync-sepolia"
	TestFilterFunctionDtoNetworkZoraMainnet        TestFilterFunctionDtoNetwork = "zora-mainnet"
)

// Defines values for UpdateStreamDtoDestination.
const (
	UpdateStreamDtoDestinationFunction UpdateStreamDtoDestination = "function"
	UpdateStreamDtoDestinationPostgres UpdateStreamDtoDestination = "postgres"
	UpdateStreamDtoDestinationS3       UpdateStreamDtoDestination = "s3"
	UpdateStreamDtoDestinationWebhook  UpdateStreamDtoDestination = "webhook"
)

// Defines values for UpdateStreamDtoIncludeStreamMetadata.
const (
	UpdateStreamDtoIncludeStreamMetadataBody   UpdateStreamDtoIncludeStreamMetadata = "body"
	UpdateStreamDtoIncludeStreamMetadataHeader UpdateStreamDtoIncludeStreamMetadata = "header"
	UpdateStreamDtoIncludeStreamMetadataNone   UpdateStreamDtoIncludeStreamMetadata = "none"
)

// Defines values for UpdateStreamDtoStatus.
const (
	UpdateStreamDtoStatusActive     UpdateStreamDtoStatus = "active"
	UpdateStreamDtoStatusCompleted  UpdateStreamDtoStatus = "completed"
	UpdateStreamDtoStatusPaused     UpdateStreamDtoStatus = "paused"
	UpdateStreamDtoStatusTerminated UpdateStreamDtoStatus = "terminated"
)

// CreateStreamDto defines model for CreateStreamDto.
type CreateStreamDto struct {
	Dataset               CreateStreamDtoDataset                `json:"dataset"`
	DatasetBatchSize      float32                               `json:"dataset_batch_size"`
	Destination           CreateStreamDtoDestination            `json:"destination"`
	DestinationAttributes CreateStreamDto_DestinationAttributes `json:"destination_attributes"`
	ElasticBatchEnabled   bool                                  `json:"elastic_batch_enabled"`

	// EndRange Stream until block number
	EndRange *float32 `json:"end_range,omitempty"`

	// FilterFunction JS/ECMAScript compliant filter encoded in base64
	FilterFunction string `json:"filter_function"`

	// FixBlockReorgs Fix block reorgs by streaming correct blocks: 1. Ignore reorgs: 0
	FixBlockReorgs        *float32                             `json:"fix_block_reorgs,omitempty"`
	IncludeStreamMetadata CreateStreamDtoIncludeStreamMetadata `json:"include_stream_metadata"`

	// KeepDistanceFromTip Stay away from tip by N blocks
	KeepDistanceFromTip *float32               `json:"keep_distance_from_tip,omitempty"`
	Name                string                 `json:"name"`
	Network             CreateStreamDtoNetwork `json:"network"`

	// NotificationEmail Notify when stream is terminated
	NotificationEmail *string               `json:"notification_email,omitempty"`
	Region            CreateStreamDtoRegion `json:"region"`

	// StartRange Stream start at block number. If not provided, the stream will start at the latest block.
	StartRange *float32              `json:"start_range,omitempty"`
	Status     CreateStreamDtoStatus `json:"status"`
}

// CreateStreamDtoDataset defines model for CreateStreamDto.Dataset.
type CreateStreamDtoDataset string

// CreateStreamDtoDestination defines model for CreateStreamDto.Destination.
type CreateStreamDtoDestination string

// CreateStreamDto_DestinationAttributes defines model for CreateStreamDto.DestinationAttributes.
type CreateStreamDto_DestinationAttributes struct {
	union json.RawMessage
}

// CreateStreamDtoIncludeStreamMetadata defines model for CreateStreamDto.IncludeStreamMetadata.
type CreateStreamDtoIncludeStreamMetadata string

// CreateStreamDtoNetwork defines model for CreateStreamDto.Network.
type CreateStreamDtoNetwork string

// CreateStreamDtoRegion defines model for CreateStreamDto.Region.
type CreateStreamDtoRegion string

// CreateStreamDtoStatus defines model for CreateStreamDto.Status.
type CreateStreamDtoStatus string

// PostgresAttributes defines model for PostgresAttributes.
type PostgresAttributes struct {
	AccessKey        string                    `json:"access_key"`
	Database         string                    `json:"database"`
	Host             string                    `json:"host"`
	MaxRetry         float32                   `json:"max_retry"`
	Password         string                    `json:"password"`
	Port             float32                   `json:"port"`
	RetryIntervalSec float32                   `json:"retry_interval_sec"`
	Sslmode          PostgresAttributesSslmode `json:"sslmode"`
	TableName        string                    `json:"table_name"`
	Username         string                    `json:"username"`
}

// PostgresAttributesSslmode defines model for PostgresAttributes.Sslmode.
type PostgresAttributesSslmode string

// QuickfunctionsAttributes defines model for QuickfunctionsAttributes.
type QuickfunctionsAttributes struct {
	Headers          map[string]interface{} `json:"headers"`
	MaxEntry         float32                `json:"max_entry"`
	Name             string                 `json:"name"`
	Namespace        string                 `json:"namespace"`
	PostTimeoutSec   float32                `json:"post_timeout_sec"`
	RetryIntervalSec float32                `json:"retry_interval_sec"`
	SecurityToken    string                 `json:"security_token"`
}

// S3Attributes defines model for S3Attributes.
type S3Attributes struct {
	AccessKey        string               `json:"access_key"`
	Bucket           string               `json:"bucket"`
	Endpoint         string               `json:"endpoint"`
	FileCompression  string               `json:"file_compression"`
	FileType         S3AttributesFileType `json:"file_type"`
	MaxRetry         float32              `json:"max_retry"`
	ObjectPrefix     string               `json:"object_prefix"`
	RetryIntervalSec float32              `json:"retry_interval_sec"`
	SecretKey        string               `json:"secret_key"`
	UseSsl           bool                 `json:"use_ssl"`
}

// S3AttributesFileType defines model for S3Attributes.FileType.
type S3AttributesFileType string

// TestFilterFunctionDto defines model for TestFilterFunctionDto.
type TestFilterFunctionDto struct {
	Block   string                       `json:"block"`
	Dataset TestFilterFunctionDtoDataset `json:"dataset"`

	// FilterFunction JS/ECMAScript compliant filter encoded in base64
	FilterFunction string                       `json:"filter_function"`
	Network        TestFilterFunctionDtoNetwork `json:"network"`
}

// TestFilterFunctionDtoDataset defines model for TestFilterFunctionDto.Dataset.
type TestFilterFunctionDtoDataset string

// TestFilterFunctionDtoNetwork defines model for TestFilterFunctionDto.Network.
type TestFilterFunctionDtoNetwork string

// UpdateStreamDto defines model for UpdateStreamDto.
type UpdateStreamDto struct {
	DatasetBatchSize      *float32                               `json:"dataset_batch_size,omitempty"`
	Destination           *UpdateStreamDtoDestination            `json:"destination,omitempty"`
	DestinationAttributes *UpdateStreamDto_DestinationAttributes `json:"destination_attributes,omitempty"`
	ElasticBatchEnabled   *bool                                  `json:"elastic_batch_enabled,omitempty"`

	// EndRange Stream until block number
	EndRange *float32 `json:"end_range,omitempty"`

	// FilterFunction JS/ECMAScript compliant filter encoded in base64
	FilterFunction *string `json:"filter_function,omitempty"`

	// FixBlockReorgs Fix block reorgs by streaming correct blocks: 1. Ignore reorgs: 0
	FixBlockReorgs        *float32                              `json:"fix_block_reorgs,omitempty"`
	IncludeStreamMetadata *UpdateStreamDtoIncludeStreamMetadata `json:"include_stream_metadata,omitempty"`

	// KeepDistanceFromTip Stay away from tip by N blocks
	KeepDistanceFromTip *float32 `json:"keep_distance_from_tip,omitempty"`
	Name                *string  `json:"name,omitempty"`

	// NotificationEmail Notify when stream is terminated
	NotificationEmail *string `json:"notification_email,omitempty"`

	// StartRange Stream start at block number. If not provided, the stream will start at the latest block.
	StartRange *float32               `json:"start_range,omitempty"`
	Status     *UpdateStreamDtoStatus `json:"status,omitempty"`
}

// UpdateStreamDtoDestination defines model for UpdateStreamDto.Destination.
type UpdateStreamDtoDestination string

// UpdateStreamDto_DestinationAttributes defines model for UpdateStreamDto.DestinationAttributes.
type UpdateStreamDto_DestinationAttributes struct {
	union json.RawMessage
}

// UpdateStreamDtoIncludeStreamMetadata defines model for UpdateStreamDto.IncludeStreamMetadata.
type UpdateStreamDtoIncludeStreamMetadata string

// UpdateStreamDtoStatus defines model for UpdateStreamDto.Status.
type UpdateStreamDtoStatus string

// WebhookAttributes defines model for WebhookAttributes.
type WebhookAttributes struct {
	Compression      string                 `json:"compression"`
	Headers          map[string]interface{} `json:"headers"`
	MaxRetry         float32                `json:"max_retry"`
	PostTimeoutSec   float32                `json:"post_timeout_sec"`
	RetryIntervalSec float32                `json:"retry_interval_sec"`
	SecurityToken    string                 `json:"security_token"`
	Url              string                 `json:"url"`
}

// FindAllParams defines parameters for FindAll.
type FindAllParams struct {
	Limit  float32 `form:"limit" json:"limit"`
	Offset float32 `form:"offset" json:"offset"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = CreateStreamDto

// TestFilterFunctionJSONRequestBody defines body for TestFilterFunction for application/json ContentType.
type TestFilterFunctionJSONRequestBody = TestFilterFunctionDto

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = UpdateStreamDto

// AsS3Attributes returns the union data inside the CreateStreamDto_DestinationAttributes as a S3Attributes
func (t CreateStreamDto_DestinationAttributes) AsS3Attributes() (S3Attributes, error) {
	var body S3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3Attributes overwrites any union data inside the CreateStreamDto_DestinationAttributes as the provided S3Attributes
func (t *CreateStreamDto_DestinationAttributes) FromS3Attributes(v S3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3Attributes performs a merge with any union data inside the CreateStreamDto_DestinationAttributes, using the provided S3Attributes
func (t *CreateStreamDto_DestinationAttributes) MergeS3Attributes(v S3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookAttributes returns the union data inside the CreateStreamDto_DestinationAttributes as a WebhookAttributes
func (t CreateStreamDto_DestinationAttributes) AsWebhookAttributes() (WebhookAttributes, error) {
	var body WebhookAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookAttributes overwrites any union data inside the CreateStreamDto_DestinationAttributes as the provided WebhookAttributes
func (t *CreateStreamDto_DestinationAttributes) FromWebhookAttributes(v WebhookAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookAttributes performs a merge with any union data inside the CreateStreamDto_DestinationAttributes, using the provided WebhookAttributes
func (t *CreateStreamDto_DestinationAttributes) MergeWebhookAttributes(v WebhookAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsQuickfunctionsAttributes returns the union data inside the CreateStreamDto_DestinationAttributes as a QuickfunctionsAttributes
func (t CreateStreamDto_DestinationAttributes) AsQuickfunctionsAttributes() (QuickfunctionsAttributes, error) {
	var body QuickfunctionsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuickfunctionsAttributes overwrites any union data inside the CreateStreamDto_DestinationAttributes as the provided QuickfunctionsAttributes
func (t *CreateStreamDto_DestinationAttributes) FromQuickfunctionsAttributes(v QuickfunctionsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuickfunctionsAttributes performs a merge with any union data inside the CreateStreamDto_DestinationAttributes, using the provided QuickfunctionsAttributes
func (t *CreateStreamDto_DestinationAttributes) MergeQuickfunctionsAttributes(v QuickfunctionsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostgresAttributes returns the union data inside the CreateStreamDto_DestinationAttributes as a PostgresAttributes
func (t CreateStreamDto_DestinationAttributes) AsPostgresAttributes() (PostgresAttributes, error) {
	var body PostgresAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostgresAttributes overwrites any union data inside the CreateStreamDto_DestinationAttributes as the provided PostgresAttributes
func (t *CreateStreamDto_DestinationAttributes) FromPostgresAttributes(v PostgresAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostgresAttributes performs a merge with any union data inside the CreateStreamDto_DestinationAttributes, using the provided PostgresAttributes
func (t *CreateStreamDto_DestinationAttributes) MergePostgresAttributes(v PostgresAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateStreamDto_DestinationAttributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateStreamDto_DestinationAttributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3Attributes returns the union data inside the UpdateStreamDto_DestinationAttributes as a S3Attributes
func (t UpdateStreamDto_DestinationAttributes) AsS3Attributes() (S3Attributes, error) {
	var body S3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3Attributes overwrites any union data inside the UpdateStreamDto_DestinationAttributes as the provided S3Attributes
func (t *UpdateStreamDto_DestinationAttributes) FromS3Attributes(v S3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3Attributes performs a merge with any union data inside the UpdateStreamDto_DestinationAttributes, using the provided S3Attributes
func (t *UpdateStreamDto_DestinationAttributes) MergeS3Attributes(v S3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookAttributes returns the union data inside the UpdateStreamDto_DestinationAttributes as a WebhookAttributes
func (t UpdateStreamDto_DestinationAttributes) AsWebhookAttributes() (WebhookAttributes, error) {
	var body WebhookAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookAttributes overwrites any union data inside the UpdateStreamDto_DestinationAttributes as the provided WebhookAttributes
func (t *UpdateStreamDto_DestinationAttributes) FromWebhookAttributes(v WebhookAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookAttributes performs a merge with any union data inside the UpdateStreamDto_DestinationAttributes, using the provided WebhookAttributes
func (t *UpdateStreamDto_DestinationAttributes) MergeWebhookAttributes(v WebhookAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsQuickfunctionsAttributes returns the union data inside the UpdateStreamDto_DestinationAttributes as a QuickfunctionsAttributes
func (t UpdateStreamDto_DestinationAttributes) AsQuickfunctionsAttributes() (QuickfunctionsAttributes, error) {
	var body QuickfunctionsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuickfunctionsAttributes overwrites any union data inside the UpdateStreamDto_DestinationAttributes as the provided QuickfunctionsAttributes
func (t *UpdateStreamDto_DestinationAttributes) FromQuickfunctionsAttributes(v QuickfunctionsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuickfunctionsAttributes performs a merge with any union data inside the UpdateStreamDto_DestinationAttributes, using the provided QuickfunctionsAttributes
func (t *UpdateStreamDto_DestinationAttributes) MergeQuickfunctionsAttributes(v QuickfunctionsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostgresAttributes returns the union data inside the UpdateStreamDto_DestinationAttributes as a PostgresAttributes
func (t UpdateStreamDto_DestinationAttributes) AsPostgresAttributes() (PostgresAttributes, error) {
	var body PostgresAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostgresAttributes overwrites any union data inside the UpdateStreamDto_DestinationAttributes as the provided PostgresAttributes
func (t *UpdateStreamDto_DestinationAttributes) FromPostgresAttributes(v PostgresAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostgresAttributes performs a merge with any union data inside the UpdateStreamDto_DestinationAttributes, using the provided PostgresAttributes
func (t *UpdateStreamDto_DestinationAttributes) MergePostgresAttributes(v PostgresAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateStreamDto_DestinationAttributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateStreamDto_DestinationAttributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RemoveStreamsByAccountId request
	RemoveStreamsByAccountId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAll request
	FindAll(ctx context.Context, params *FindAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWithBody request with any body
	CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnabledStreams request
	GetEnabledStreams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFilterFunctionWithBody request with any body
	TestFilterFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestFilterFunction(ctx context.Context, body TestFilterFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Remove request
	Remove(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindOne request
	FindOne(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWithBody request with any body
	UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, id string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateStream request
	ActivateStream(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseStream request
	PauseStream(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RemoveStreamsByAccountId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveStreamsByAccountIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAll(ctx context.Context, params *FindAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnabledStreams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnabledStreamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFilterFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFilterFunctionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFilterFunction(ctx context.Context, body TestFilterFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFilterFunctionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Remove(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindOne(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindOneRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, id string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateStream(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateStreamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseStream(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseStreamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRemoveStreamsByAccountIdRequest generates requests for RemoveStreamsByAccountId
func NewRemoveStreamsByAccountIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAllRequest generates requests for FindAll
func NewFindAllRequest(server string, params *FindAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(server string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnabledStreamsRequest generates requests for GetEnabledStreams
func NewGetEnabledStreamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/enabled_count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFilterFunctionRequest calls the generic TestFilterFunction builder with application/json body
func NewTestFilterFunctionRequest(server string, body TestFilterFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestFilterFunctionRequestWithBody(server, "application/json", bodyReader)
}

// NewTestFilterFunctionRequestWithBody generates requests for TestFilterFunction with any type of body
func NewTestFilterFunctionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/test_filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRequest generates requests for Remove
func NewRemoveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindOneRequest generates requests for FindOne
func NewFindOneRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(server string, id string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActivateStreamRequest generates requests for ActivateStream
func NewActivateStreamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/%s/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseStreamRequest generates requests for PauseStream
func NewPauseStreamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams/rest/v1/streams/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RemoveStreamsByAccountIdWithResponse request
	RemoveStreamsByAccountIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RemoveStreamsByAccountIdResponse, error)

	// FindAllWithResponse request
	FindAllWithResponse(ctx context.Context, params *FindAllParams, reqEditors ...RequestEditorFn) (*FindAllResponse, error)

	// CreateWithBodyWithResponse request with any body
	CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// GetEnabledStreamsWithResponse request
	GetEnabledStreamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnabledStreamsResponse, error)

	// TestFilterFunctionWithBodyWithResponse request with any body
	TestFilterFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestFilterFunctionResponse, error)

	TestFilterFunctionWithResponse(ctx context.Context, body TestFilterFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*TestFilterFunctionResponse, error)

	// RemoveWithResponse request
	RemoveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RemoveResponse, error)

	// FindOneWithResponse request
	FindOneWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FindOneResponse, error)

	// UpdateWithBodyWithResponse request with any body
	UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, id string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// ActivateStreamWithResponse request
	ActivateStreamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActivateStreamResponse, error)

	// PauseStreamWithResponse request
	PauseStreamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PauseStreamResponse, error)
}

type RemoveStreamsByAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveStreamsByAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveStreamsByAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnabledStreamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnabledStreamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnabledStreamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFilterFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFilterFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFilterFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RemoveStreamsByAccountIdWithResponse request returning *RemoveStreamsByAccountIdResponse
func (c *ClientWithResponses) RemoveStreamsByAccountIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RemoveStreamsByAccountIdResponse, error) {
	rsp, err := c.RemoveStreamsByAccountId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveStreamsByAccountIdResponse(rsp)
}

// FindAllWithResponse request returning *FindAllResponse
func (c *ClientWithResponses) FindAllWithResponse(ctx context.Context, params *FindAllParams, reqEditors ...RequestEditorFn) (*FindAllResponse, error) {
	rsp, err := c.FindAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllResponse(rsp)
}

// CreateWithBodyWithResponse request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

// GetEnabledStreamsWithResponse request returning *GetEnabledStreamsResponse
func (c *ClientWithResponses) GetEnabledStreamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnabledStreamsResponse, error) {
	rsp, err := c.GetEnabledStreams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnabledStreamsResponse(rsp)
}

// TestFilterFunctionWithBodyWithResponse request with arbitrary body returning *TestFilterFunctionResponse
func (c *ClientWithResponses) TestFilterFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestFilterFunctionResponse, error) {
	rsp, err := c.TestFilterFunctionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFilterFunctionResponse(rsp)
}

func (c *ClientWithResponses) TestFilterFunctionWithResponse(ctx context.Context, body TestFilterFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*TestFilterFunctionResponse, error) {
	rsp, err := c.TestFilterFunction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFilterFunctionResponse(rsp)
}

// RemoveWithResponse request returning *RemoveResponse
func (c *ClientWithResponses) RemoveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RemoveResponse, error) {
	rsp, err := c.Remove(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveResponse(rsp)
}

// FindOneWithResponse request returning *FindOneResponse
func (c *ClientWithResponses) FindOneWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FindOneResponse, error) {
	rsp, err := c.FindOne(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindOneResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, id string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// ActivateStreamWithResponse request returning *ActivateStreamResponse
func (c *ClientWithResponses) ActivateStreamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActivateStreamResponse, error) {
	rsp, err := c.ActivateStream(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateStreamResponse(rsp)
}

// PauseStreamWithResponse request returning *PauseStreamResponse
func (c *ClientWithResponses) PauseStreamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PauseStreamResponse, error) {
	rsp, err := c.PauseStream(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseStreamResponse(rsp)
}

// ParseRemoveStreamsByAccountIdResponse parses an HTTP response from a RemoveStreamsByAccountIdWithResponse call
func ParseRemoveStreamsByAccountIdResponse(rsp *http.Response) (*RemoveStreamsByAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveStreamsByAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindAllResponse parses an HTTP response from a FindAllWithResponse call
func ParseFindAllResponse(rsp *http.Response) (*FindAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnabledStreamsResponse parses an HTTP response from a GetEnabledStreamsWithResponse call
func ParseGetEnabledStreamsResponse(rsp *http.Response) (*GetEnabledStreamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnabledStreamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFilterFunctionResponse parses an HTTP response from a TestFilterFunctionWithResponse call
func ParseTestFilterFunctionResponse(rsp *http.Response) (*TestFilterFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFilterFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveResponse parses an HTTP response from a RemoveWithResponse call
func ParseRemoveResponse(rsp *http.Response) (*RemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindOneResponse parses an HTTP response from a FindOneWithResponse call
func ParseFindOneResponse(rsp *http.Response) (*FindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseActivateStreamResponse parses an HTTP response from a ActivateStreamWithResponse call
func ParseActivateStreamResponse(rsp *http.Response) (*ActivateStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePauseStreamResponse parses an HTTP response from a PauseStreamWithResponse call
func ParsePauseStreamResponse(rsp *http.Response) (*PauseStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Package quicknode provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package quicknode

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Chain defines model for chain.
type Chain struct {
	Networks *[]Network `json:"networks,omitempty"`
	Slug     *string    `json:"slug,omitempty"`
}

// ChainUsage defines model for chain_usage.
type ChainUsage struct {
	CreditsUsed *int    `json:"credits_used,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Endpoint defines model for endpoint.
type Endpoint struct {
	// Chain chain slug
	Chain   string  `json:"chain"`
	HttpUrl string  `json:"http_url"`
	Id      string  `json:"id"`
	Label   *string `json:"label"`

	// Network network slug
	Network  string           `json:"network"`
	Security EndpointSecurity `json:"security"`
	WssUrl   string           `json:"wss_url"`
}

// EndpointDomainMask defines model for endpoint_domain_mask.
type EndpointDomainMask struct {
	Domain *string `json:"domain,omitempty"`
	Id     *string `json:"id,omitempty"`
}

// EndpointIp defines model for endpoint_ip.
type EndpointIp struct {
	Id *string `json:"id,omitempty"`
	Ip *string `json:"ip,omitempty"`
}

// EndpointJwt defines model for endpoint_jwt.
type EndpointJwt struct {
	Id        *string `json:"id,omitempty"`
	Kid       *string `json:"kid,omitempty"`
	Name      *string `json:"name,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
}

// EndpointReferrer defines model for endpoint_referrer.
type EndpointReferrer struct {
	Id       *string `json:"id,omitempty"`
	Referrer *string `json:"referrer,omitempty"`
}

// EndpointSecurity defines model for endpoint_security.
type EndpointSecurity struct {
	DomainMasks *[]EndpointDomainMask `json:"domain_masks,omitempty"`
	Ips         *[]EndpointIp         `json:"ips,omitempty"`
	Jwts        *[]EndpointJwt        `json:"jwts,omitempty"`
	Options     *struct {
		Tokens *bool `json:"tokens,omitempty"`
	} `json:"options,omitempty"`
	Referrers *[]EndpointReferrer `json:"referrers,omitempty"`
	Tokens    *[]EndpointToken    `json:"tokens,omitempty"`
}

// EndpointToken defines model for endpoint_token.
type EndpointToken struct {
	Id    *string `json:"id,omitempty"`
	Token *string `json:"token,omitempty"`
}

// EndpointUsage defines model for endpoint_usage.
type EndpointUsage struct {
	Chain            *string        `json:"chain,omitempty"`
	CreditsUsed      *int           `json:"credits_used,omitempty"`
	Label            *string        `json:"label"`
	MethodsBreakdown *[]MethodUsage `json:"methods_breakdown,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Network          *string        `json:"network,omitempty"`
}

// MethodUsage defines model for method_usage.
type MethodUsage struct {
	CreditsUsed *int    `json:"credits_used,omitempty"`
	MethodName  *string `json:"method_name,omitempty"`
}

// Network defines model for network.
type Network struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// PostV0EndpointsJSONBody defines parameters for PostV0Endpoints.
type PostV0EndpointsJSONBody struct {
	Chain   *string `json:"chain,omitempty"`
	Network *string `json:"network,omitempty"`
}

// PatchV0EndpointsIdJSONBody defines parameters for PatchV0EndpointsId.
type PatchV0EndpointsIdJSONBody struct {
	Label *string `json:"label,omitempty"`
}

// PostV0EndpointsIdSecurityDomainMasksJSONBody defines parameters for PostV0EndpointsIdSecurityDomainMasks.
type PostV0EndpointsIdSecurityDomainMasksJSONBody struct {
	DomainMask *string `json:"domain_mask,omitempty"`
}

// PostV0EndpointsIdSecurityIpsJSONBody defines parameters for PostV0EndpointsIdSecurityIps.
type PostV0EndpointsIdSecurityIpsJSONBody struct {
	Ip *string `json:"ip,omitempty"`
}

// PostV0EndpointsIdSecurityJwtsJSONBody defines parameters for PostV0EndpointsIdSecurityJwts.
type PostV0EndpointsIdSecurityJwtsJSONBody struct {
	Kid       *string `json:"kid,omitempty"`
	Name      *string `json:"name,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
}

// PostV0EndpointsIdSecurityReferrersJSONBody defines parameters for PostV0EndpointsIdSecurityReferrers.
type PostV0EndpointsIdSecurityReferrersJSONBody struct {
	Referrer *string `json:"referrer,omitempty"`
}

// GetV0UsageRpcParams defines parameters for GetV0UsageRpc.
type GetV0UsageRpcParams struct {
	// StartTime Start time
	StartTime *int `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime End time
	EndTime *int `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetV0UsageRpcByChainParams defines parameters for GetV0UsageRpcByChain.
type GetV0UsageRpcByChainParams struct {
	// StartTime Start time
	StartTime *int `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime End time
	EndTime *int `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetV0UsageRpcByEndpointParams defines parameters for GetV0UsageRpcByEndpoint.
type GetV0UsageRpcByEndpointParams struct {
	// StartTime Start time
	StartTime *int `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime End time
	EndTime *int `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetV0UsageRpcByMethodParams defines parameters for GetV0UsageRpcByMethod.
type GetV0UsageRpcByMethodParams struct {
	// StartTime Start time
	StartTime *int `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime End time
	EndTime *int `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// PostV0EndpointsJSONRequestBody defines body for PostV0Endpoints for application/json ContentType.
type PostV0EndpointsJSONRequestBody PostV0EndpointsJSONBody

// PatchV0EndpointsIdJSONRequestBody defines body for PatchV0EndpointsId for application/json ContentType.
type PatchV0EndpointsIdJSONRequestBody PatchV0EndpointsIdJSONBody

// PostV0EndpointsIdSecurityDomainMasksJSONRequestBody defines body for PostV0EndpointsIdSecurityDomainMasks for application/json ContentType.
type PostV0EndpointsIdSecurityDomainMasksJSONRequestBody PostV0EndpointsIdSecurityDomainMasksJSONBody

// PostV0EndpointsIdSecurityIpsJSONRequestBody defines body for PostV0EndpointsIdSecurityIps for application/json ContentType.
type PostV0EndpointsIdSecurityIpsJSONRequestBody PostV0EndpointsIdSecurityIpsJSONBody

// PostV0EndpointsIdSecurityJwtsJSONRequestBody defines body for PostV0EndpointsIdSecurityJwts for application/json ContentType.
type PostV0EndpointsIdSecurityJwtsJSONRequestBody PostV0EndpointsIdSecurityJwtsJSONBody

// PostV0EndpointsIdSecurityReferrersJSONRequestBody defines body for PostV0EndpointsIdSecurityReferrers for application/json ContentType.
type PostV0EndpointsIdSecurityReferrersJSONRequestBody PostV0EndpointsIdSecurityReferrersJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV0Chains request
	GetV0Chains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0Endpoints request
	GetV0Endpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsWithBody request with any body
	PostV0EndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0Endpoints(ctx context.Context, body PostV0EndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsId request
	DeleteV0EndpointsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0EndpointsId request
	GetV0EndpointsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV0EndpointsIdWithBody request with any body
	PatchV0EndpointsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV0EndpointsId(ctx context.Context, id string, body PatchV0EndpointsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsIdSecurityDomainMasksWithBody request with any body
	PostV0EndpointsIdSecurityDomainMasksWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0EndpointsIdSecurityDomainMasks(ctx context.Context, id string, body PostV0EndpointsIdSecurityDomainMasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsIdSecurityDomainMasksDomainMaskId request
	DeleteV0EndpointsIdSecurityDomainMasksDomainMaskId(ctx context.Context, id string, domainMaskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsIdSecurityIpsWithBody request with any body
	PostV0EndpointsIdSecurityIpsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0EndpointsIdSecurityIps(ctx context.Context, id string, body PostV0EndpointsIdSecurityIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsIdSecurityIpsIpId request
	DeleteV0EndpointsIdSecurityIpsIpId(ctx context.Context, id string, ipId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsIdSecurityJwtsWithBody request with any body
	PostV0EndpointsIdSecurityJwtsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0EndpointsIdSecurityJwts(ctx context.Context, id string, body PostV0EndpointsIdSecurityJwtsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsIdSecurityJwtsJwtId request
	DeleteV0EndpointsIdSecurityJwtsJwtId(ctx context.Context, id string, jwtId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsIdSecurityReferrersWithBody request with any body
	PostV0EndpointsIdSecurityReferrersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV0EndpointsIdSecurityReferrers(ctx context.Context, id string, body PostV0EndpointsIdSecurityReferrersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsIdSecurityReferrersReferrerId request
	DeleteV0EndpointsIdSecurityReferrersReferrerId(ctx context.Context, id string, referrerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV0EndpointsIdSecurityTokens request
	PostV0EndpointsIdSecurityTokens(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV0EndpointsIdSecurityTokensTokenId request
	DeleteV0EndpointsIdSecurityTokensTokenId(ctx context.Context, id string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0UsageRpc request
	GetV0UsageRpc(ctx context.Context, params *GetV0UsageRpcParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0UsageRpcByChain request
	GetV0UsageRpcByChain(ctx context.Context, params *GetV0UsageRpcByChainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0UsageRpcByEndpoint request
	GetV0UsageRpcByEndpoint(ctx context.Context, params *GetV0UsageRpcByEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV0UsageRpcByMethod request
	GetV0UsageRpcByMethod(ctx context.Context, params *GetV0UsageRpcByMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV0Chains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0ChainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0Endpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0EndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0Endpoints(ctx context.Context, body PostV0EndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0EndpointsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0EndpointsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV0EndpointsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV0EndpointsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV0EndpointsId(ctx context.Context, id string, body PatchV0EndpointsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV0EndpointsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityDomainMasksWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityDomainMasksRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityDomainMasks(ctx context.Context, id string, body PostV0EndpointsIdSecurityDomainMasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityDomainMasksRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsIdSecurityDomainMasksDomainMaskId(ctx context.Context, id string, domainMaskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdRequest(c.Server, id, domainMaskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityIpsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityIpsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityIps(ctx context.Context, id string, body PostV0EndpointsIdSecurityIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityIpsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsIdSecurityIpsIpId(ctx context.Context, id string, ipId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdSecurityIpsIpIdRequest(c.Server, id, ipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityJwtsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityJwtsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityJwts(ctx context.Context, id string, body PostV0EndpointsIdSecurityJwtsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityJwtsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsIdSecurityJwtsJwtId(ctx context.Context, id string, jwtId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdSecurityJwtsJwtIdRequest(c.Server, id, jwtId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityReferrersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityReferrersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityReferrers(ctx context.Context, id string, body PostV0EndpointsIdSecurityReferrersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityReferrersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsIdSecurityReferrersReferrerId(ctx context.Context, id string, referrerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdSecurityReferrersReferrerIdRequest(c.Server, id, referrerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV0EndpointsIdSecurityTokens(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV0EndpointsIdSecurityTokensRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV0EndpointsIdSecurityTokensTokenId(ctx context.Context, id string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV0EndpointsIdSecurityTokensTokenIdRequest(c.Server, id, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0UsageRpc(ctx context.Context, params *GetV0UsageRpcParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0UsageRpcRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0UsageRpcByChain(ctx context.Context, params *GetV0UsageRpcByChainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0UsageRpcByChainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0UsageRpcByEndpoint(ctx context.Context, params *GetV0UsageRpcByEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0UsageRpcByEndpointRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV0UsageRpcByMethod(ctx context.Context, params *GetV0UsageRpcByMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV0UsageRpcByMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV0ChainsRequest generates requests for GetV0Chains
func NewGetV0ChainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/chains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0EndpointsRequest generates requests for GetV0Endpoints
func NewGetV0EndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0EndpointsRequest calls the generic PostV0Endpoints builder with application/json body
func NewPostV0EndpointsRequest(server string, body PostV0EndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EndpointsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV0EndpointsRequestWithBody generates requests for PostV0Endpoints with any type of body
func NewPostV0EndpointsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0EndpointsIdRequest generates requests for DeleteV0EndpointsId
func NewDeleteV0EndpointsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0EndpointsIdRequest generates requests for GetV0EndpointsId
func NewGetV0EndpointsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV0EndpointsIdRequest calls the generic PatchV0EndpointsId builder with application/json body
func NewPatchV0EndpointsIdRequest(server string, id string, body PatchV0EndpointsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV0EndpointsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV0EndpointsIdRequestWithBody generates requests for PatchV0EndpointsId with any type of body
func NewPatchV0EndpointsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV0EndpointsIdSecurityDomainMasksRequest calls the generic PostV0EndpointsIdSecurityDomainMasks builder with application/json body
func NewPostV0EndpointsIdSecurityDomainMasksRequest(server string, id string, body PostV0EndpointsIdSecurityDomainMasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EndpointsIdSecurityDomainMasksRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV0EndpointsIdSecurityDomainMasksRequestWithBody generates requests for PostV0EndpointsIdSecurityDomainMasks with any type of body
func NewPostV0EndpointsIdSecurityDomainMasksRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/domain_masks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdRequest generates requests for DeleteV0EndpointsIdSecurityDomainMasksDomainMaskId
func NewDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdRequest(server string, id string, domainMaskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domain_mask_id", runtime.ParamLocationPath, domainMaskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/domain_masks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0EndpointsIdSecurityIpsRequest calls the generic PostV0EndpointsIdSecurityIps builder with application/json body
func NewPostV0EndpointsIdSecurityIpsRequest(server string, id string, body PostV0EndpointsIdSecurityIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EndpointsIdSecurityIpsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV0EndpointsIdSecurityIpsRequestWithBody generates requests for PostV0EndpointsIdSecurityIps with any type of body
func NewPostV0EndpointsIdSecurityIpsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/ips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0EndpointsIdSecurityIpsIpIdRequest generates requests for DeleteV0EndpointsIdSecurityIpsIpId
func NewDeleteV0EndpointsIdSecurityIpsIpIdRequest(server string, id string, ipId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ip_id", runtime.ParamLocationPath, ipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0EndpointsIdSecurityJwtsRequest calls the generic PostV0EndpointsIdSecurityJwts builder with application/json body
func NewPostV0EndpointsIdSecurityJwtsRequest(server string, id string, body PostV0EndpointsIdSecurityJwtsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EndpointsIdSecurityJwtsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV0EndpointsIdSecurityJwtsRequestWithBody generates requests for PostV0EndpointsIdSecurityJwts with any type of body
func NewPostV0EndpointsIdSecurityJwtsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/jwts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0EndpointsIdSecurityJwtsJwtIdRequest generates requests for DeleteV0EndpointsIdSecurityJwtsJwtId
func NewDeleteV0EndpointsIdSecurityJwtsJwtIdRequest(server string, id string, jwtId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jwt_id", runtime.ParamLocationPath, jwtId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/jwts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0EndpointsIdSecurityReferrersRequest calls the generic PostV0EndpointsIdSecurityReferrers builder with application/json body
func NewPostV0EndpointsIdSecurityReferrersRequest(server string, id string, body PostV0EndpointsIdSecurityReferrersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV0EndpointsIdSecurityReferrersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV0EndpointsIdSecurityReferrersRequestWithBody generates requests for PostV0EndpointsIdSecurityReferrers with any type of body
func NewPostV0EndpointsIdSecurityReferrersRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/referrers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV0EndpointsIdSecurityReferrersReferrerIdRequest generates requests for DeleteV0EndpointsIdSecurityReferrersReferrerId
func NewDeleteV0EndpointsIdSecurityReferrersReferrerIdRequest(server string, id string, referrerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "referrer_id", runtime.ParamLocationPath, referrerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/referrers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV0EndpointsIdSecurityTokensRequest generates requests for PostV0EndpointsIdSecurityTokens
func NewPostV0EndpointsIdSecurityTokensRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV0EndpointsIdSecurityTokensTokenIdRequest generates requests for DeleteV0EndpointsIdSecurityTokensTokenId
func NewDeleteV0EndpointsIdSecurityTokensTokenIdRequest(server string, id string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/endpoints/%s/security/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0UsageRpcRequest generates requests for GetV0UsageRpc
func NewGetV0UsageRpcRequest(server string, params *GetV0UsageRpcParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/usage/rpc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0UsageRpcByChainRequest generates requests for GetV0UsageRpcByChain
func NewGetV0UsageRpcByChainRequest(server string, params *GetV0UsageRpcByChainParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/usage/rpc/by-chain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0UsageRpcByEndpointRequest generates requests for GetV0UsageRpcByEndpoint
func NewGetV0UsageRpcByEndpointRequest(server string, params *GetV0UsageRpcByEndpointParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/usage/rpc/by-endpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV0UsageRpcByMethodRequest generates requests for GetV0UsageRpcByMethod
func NewGetV0UsageRpcByMethodRequest(server string, params *GetV0UsageRpcByMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/usage/rpc/by-method")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV0ChainsWithResponse request
	GetV0ChainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0ChainsResponse, error)

	// GetV0EndpointsWithResponse request
	GetV0EndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0EndpointsResponse, error)

	// PostV0EndpointsWithBodyWithResponse request with any body
	PostV0EndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsResponse, error)

	PostV0EndpointsWithResponse(ctx context.Context, body PostV0EndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsResponse, error)

	// DeleteV0EndpointsIdWithResponse request
	DeleteV0EndpointsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdResponse, error)

	// GetV0EndpointsIdWithResponse request
	GetV0EndpointsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0EndpointsIdResponse, error)

	// PatchV0EndpointsIdWithBodyWithResponse request with any body
	PatchV0EndpointsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV0EndpointsIdResponse, error)

	PatchV0EndpointsIdWithResponse(ctx context.Context, id string, body PatchV0EndpointsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV0EndpointsIdResponse, error)

	// PostV0EndpointsIdSecurityDomainMasksWithBodyWithResponse request with any body
	PostV0EndpointsIdSecurityDomainMasksWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityDomainMasksResponse, error)

	PostV0EndpointsIdSecurityDomainMasksWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityDomainMasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityDomainMasksResponse, error)

	// DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdWithResponse request
	DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdWithResponse(ctx context.Context, id string, domainMaskId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse, error)

	// PostV0EndpointsIdSecurityIpsWithBodyWithResponse request with any body
	PostV0EndpointsIdSecurityIpsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityIpsResponse, error)

	PostV0EndpointsIdSecurityIpsWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityIpsResponse, error)

	// DeleteV0EndpointsIdSecurityIpsIpIdWithResponse request
	DeleteV0EndpointsIdSecurityIpsIpIdWithResponse(ctx context.Context, id string, ipId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityIpsIpIdResponse, error)

	// PostV0EndpointsIdSecurityJwtsWithBodyWithResponse request with any body
	PostV0EndpointsIdSecurityJwtsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityJwtsResponse, error)

	PostV0EndpointsIdSecurityJwtsWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityJwtsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityJwtsResponse, error)

	// DeleteV0EndpointsIdSecurityJwtsJwtIdWithResponse request
	DeleteV0EndpointsIdSecurityJwtsJwtIdWithResponse(ctx context.Context, id string, jwtId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityJwtsJwtIdResponse, error)

	// PostV0EndpointsIdSecurityReferrersWithBodyWithResponse request with any body
	PostV0EndpointsIdSecurityReferrersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityReferrersResponse, error)

	PostV0EndpointsIdSecurityReferrersWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityReferrersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityReferrersResponse, error)

	// DeleteV0EndpointsIdSecurityReferrersReferrerIdWithResponse request
	DeleteV0EndpointsIdSecurityReferrersReferrerIdWithResponse(ctx context.Context, id string, referrerId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse, error)

	// PostV0EndpointsIdSecurityTokensWithResponse request
	PostV0EndpointsIdSecurityTokensWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityTokensResponse, error)

	// DeleteV0EndpointsIdSecurityTokensTokenIdWithResponse request
	DeleteV0EndpointsIdSecurityTokensTokenIdWithResponse(ctx context.Context, id string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityTokensTokenIdResponse, error)

	// GetV0UsageRpcWithResponse request
	GetV0UsageRpcWithResponse(ctx context.Context, params *GetV0UsageRpcParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcResponse, error)

	// GetV0UsageRpcByChainWithResponse request
	GetV0UsageRpcByChainWithResponse(ctx context.Context, params *GetV0UsageRpcByChainParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByChainResponse, error)

	// GetV0UsageRpcByEndpointWithResponse request
	GetV0UsageRpcByEndpointWithResponse(ctx context.Context, params *GetV0UsageRpcByEndpointParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByEndpointResponse, error)

	// GetV0UsageRpcByMethodWithResponse request
	GetV0UsageRpcByMethodWithResponse(ctx context.Context, params *GetV0UsageRpcByMethodParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByMethodResponse, error)
}

type GetV0ChainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  []Chain `json:"data"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0ChainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0ChainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0EndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *[]Endpoint `json:"data"`
		Error *string     `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0EndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0EndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  Endpoint `json:"data"`
		Error *string  `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0EndpointsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *Endpoint `json:"data,omitempty"`
		Error *string   `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0EndpointsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0EndpointsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV0EndpointsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV0EndpointsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV0EndpointsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsIdSecurityDomainMasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsIdSecurityDomainMasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsIdSecurityDomainMasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsIdSecurityIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsIdSecurityIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsIdSecurityIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdSecurityIpsIpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *bool   `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdSecurityIpsIpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdSecurityIpsIpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsIdSecurityJwtsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsIdSecurityJwtsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsIdSecurityJwtsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdSecurityJwtsJwtIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdSecurityJwtsJwtIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdSecurityJwtsJwtIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsIdSecurityReferrersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsIdSecurityReferrersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsIdSecurityReferrersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *bool   `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV0EndpointsIdSecurityTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV0EndpointsIdSecurityTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV0EndpointsIdSecurityTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV0EndpointsIdSecurityTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *bool   `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV0EndpointsIdSecurityTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV0EndpointsIdSecurityTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0UsageRpcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			CreditsRemaining *int `json:"credits_remaining"`
			CreditsUsed      int  `json:"credits_used"`
			EndTime          int  `json:"end_time"`
			Limit            *int `json:"limit"`
			Overages         *int `json:"overages"`
			StartTime        int  `json:"start_time"`
		} `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0UsageRpcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0UsageRpcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0UsageRpcByChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Chains    *[]ChainUsage `json:"chains,omitempty"`
			EndTime   *int          `json:"end_time,omitempty"`
			StartTime *int          `json:"start_time,omitempty"`
		} `json:"data"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0UsageRpcByChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0UsageRpcByChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0UsageRpcByEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			EndTime   *int             `json:"end_time,omitempty"`
			Endpoints *[]EndpointUsage `json:"endpoints,omitempty"`
			StartTime *int             `json:"start_time,omitempty"`
		} `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0UsageRpcByEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0UsageRpcByEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV0UsageRpcByMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			EndTime   *int           `json:"end_time,omitempty"`
			Methods   *[]MethodUsage `json:"methods,omitempty"`
			StartTime *int           `json:"start_time,omitempty"`
		} `json:"data,omitempty"`
		Error *string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV0UsageRpcByMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV0UsageRpcByMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV0ChainsWithResponse request returning *GetV0ChainsResponse
func (c *ClientWithResponses) GetV0ChainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0ChainsResponse, error) {
	rsp, err := c.GetV0Chains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0ChainsResponse(rsp)
}

// GetV0EndpointsWithResponse request returning *GetV0EndpointsResponse
func (c *ClientWithResponses) GetV0EndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV0EndpointsResponse, error) {
	rsp, err := c.GetV0Endpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0EndpointsResponse(rsp)
}

// PostV0EndpointsWithBodyWithResponse request with arbitrary body returning *PostV0EndpointsResponse
func (c *ClientWithResponses) PostV0EndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsResponse, error) {
	rsp, err := c.PostV0EndpointsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsResponse(rsp)
}

func (c *ClientWithResponses) PostV0EndpointsWithResponse(ctx context.Context, body PostV0EndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsResponse, error) {
	rsp, err := c.PostV0Endpoints(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsResponse(rsp)
}

// DeleteV0EndpointsIdWithResponse request returning *DeleteV0EndpointsIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdResponse(rsp)
}

// GetV0EndpointsIdWithResponse request returning *GetV0EndpointsIdResponse
func (c *ClientWithResponses) GetV0EndpointsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV0EndpointsIdResponse, error) {
	rsp, err := c.GetV0EndpointsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0EndpointsIdResponse(rsp)
}

// PatchV0EndpointsIdWithBodyWithResponse request with arbitrary body returning *PatchV0EndpointsIdResponse
func (c *ClientWithResponses) PatchV0EndpointsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV0EndpointsIdResponse, error) {
	rsp, err := c.PatchV0EndpointsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV0EndpointsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV0EndpointsIdWithResponse(ctx context.Context, id string, body PatchV0EndpointsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV0EndpointsIdResponse, error) {
	rsp, err := c.PatchV0EndpointsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV0EndpointsIdResponse(rsp)
}

// PostV0EndpointsIdSecurityDomainMasksWithBodyWithResponse request with arbitrary body returning *PostV0EndpointsIdSecurityDomainMasksResponse
func (c *ClientWithResponses) PostV0EndpointsIdSecurityDomainMasksWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityDomainMasksResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityDomainMasksWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityDomainMasksResponse(rsp)
}

func (c *ClientWithResponses) PostV0EndpointsIdSecurityDomainMasksWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityDomainMasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityDomainMasksResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityDomainMasks(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityDomainMasksResponse(rsp)
}

// DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdWithResponse request returning *DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdWithResponse(ctx context.Context, id string, domainMaskId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsIdSecurityDomainMasksDomainMaskId(ctx, id, domainMaskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse(rsp)
}

// PostV0EndpointsIdSecurityIpsWithBodyWithResponse request with arbitrary body returning *PostV0EndpointsIdSecurityIpsResponse
func (c *ClientWithResponses) PostV0EndpointsIdSecurityIpsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityIpsResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityIpsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityIpsResponse(rsp)
}

func (c *ClientWithResponses) PostV0EndpointsIdSecurityIpsWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityIpsResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityIps(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityIpsResponse(rsp)
}

// DeleteV0EndpointsIdSecurityIpsIpIdWithResponse request returning *DeleteV0EndpointsIdSecurityIpsIpIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdSecurityIpsIpIdWithResponse(ctx context.Context, id string, ipId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityIpsIpIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsIdSecurityIpsIpId(ctx, id, ipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdSecurityIpsIpIdResponse(rsp)
}

// PostV0EndpointsIdSecurityJwtsWithBodyWithResponse request with arbitrary body returning *PostV0EndpointsIdSecurityJwtsResponse
func (c *ClientWithResponses) PostV0EndpointsIdSecurityJwtsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityJwtsResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityJwtsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityJwtsResponse(rsp)
}

func (c *ClientWithResponses) PostV0EndpointsIdSecurityJwtsWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityJwtsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityJwtsResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityJwts(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityJwtsResponse(rsp)
}

// DeleteV0EndpointsIdSecurityJwtsJwtIdWithResponse request returning *DeleteV0EndpointsIdSecurityJwtsJwtIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdSecurityJwtsJwtIdWithResponse(ctx context.Context, id string, jwtId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityJwtsJwtIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsIdSecurityJwtsJwtId(ctx, id, jwtId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdSecurityJwtsJwtIdResponse(rsp)
}

// PostV0EndpointsIdSecurityReferrersWithBodyWithResponse request with arbitrary body returning *PostV0EndpointsIdSecurityReferrersResponse
func (c *ClientWithResponses) PostV0EndpointsIdSecurityReferrersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityReferrersResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityReferrersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityReferrersResponse(rsp)
}

func (c *ClientWithResponses) PostV0EndpointsIdSecurityReferrersWithResponse(ctx context.Context, id string, body PostV0EndpointsIdSecurityReferrersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityReferrersResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityReferrers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityReferrersResponse(rsp)
}

// DeleteV0EndpointsIdSecurityReferrersReferrerIdWithResponse request returning *DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdSecurityReferrersReferrerIdWithResponse(ctx context.Context, id string, referrerId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsIdSecurityReferrersReferrerId(ctx, id, referrerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdSecurityReferrersReferrerIdResponse(rsp)
}

// PostV0EndpointsIdSecurityTokensWithResponse request returning *PostV0EndpointsIdSecurityTokensResponse
func (c *ClientWithResponses) PostV0EndpointsIdSecurityTokensWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV0EndpointsIdSecurityTokensResponse, error) {
	rsp, err := c.PostV0EndpointsIdSecurityTokens(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV0EndpointsIdSecurityTokensResponse(rsp)
}

// DeleteV0EndpointsIdSecurityTokensTokenIdWithResponse request returning *DeleteV0EndpointsIdSecurityTokensTokenIdResponse
func (c *ClientWithResponses) DeleteV0EndpointsIdSecurityTokensTokenIdWithResponse(ctx context.Context, id string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteV0EndpointsIdSecurityTokensTokenIdResponse, error) {
	rsp, err := c.DeleteV0EndpointsIdSecurityTokensTokenId(ctx, id, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV0EndpointsIdSecurityTokensTokenIdResponse(rsp)
}

// GetV0UsageRpcWithResponse request returning *GetV0UsageRpcResponse
func (c *ClientWithResponses) GetV0UsageRpcWithResponse(ctx context.Context, params *GetV0UsageRpcParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcResponse, error) {
	rsp, err := c.GetV0UsageRpc(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0UsageRpcResponse(rsp)
}

// GetV0UsageRpcByChainWithResponse request returning *GetV0UsageRpcByChainResponse
func (c *ClientWithResponses) GetV0UsageRpcByChainWithResponse(ctx context.Context, params *GetV0UsageRpcByChainParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByChainResponse, error) {
	rsp, err := c.GetV0UsageRpcByChain(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0UsageRpcByChainResponse(rsp)
}

// GetV0UsageRpcByEndpointWithResponse request returning *GetV0UsageRpcByEndpointResponse
func (c *ClientWithResponses) GetV0UsageRpcByEndpointWithResponse(ctx context.Context, params *GetV0UsageRpcByEndpointParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByEndpointResponse, error) {
	rsp, err := c.GetV0UsageRpcByEndpoint(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0UsageRpcByEndpointResponse(rsp)
}

// GetV0UsageRpcByMethodWithResponse request returning *GetV0UsageRpcByMethodResponse
func (c *ClientWithResponses) GetV0UsageRpcByMethodWithResponse(ctx context.Context, params *GetV0UsageRpcByMethodParams, reqEditors ...RequestEditorFn) (*GetV0UsageRpcByMethodResponse, error) {
	rsp, err := c.GetV0UsageRpcByMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV0UsageRpcByMethodResponse(rsp)
}

// ParseGetV0ChainsResponse parses an HTTP response from a GetV0ChainsWithResponse call
func ParseGetV0ChainsResponse(rsp *http.Response) (*GetV0ChainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0ChainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  []Chain `json:"data"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0EndpointsResponse parses an HTTP response from a GetV0EndpointsWithResponse call
func ParseGetV0EndpointsResponse(rsp *http.Response) (*GetV0EndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0EndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *[]Endpoint `json:"data"`
			Error *string     `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0EndpointsResponse parses an HTTP response from a PostV0EndpointsWithResponse call
func ParsePostV0EndpointsResponse(rsp *http.Response) (*PostV0EndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  Endpoint `json:"data"`
			Error *string  `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV0EndpointsIdResponse parses an HTTP response from a DeleteV0EndpointsIdWithResponse call
func ParseDeleteV0EndpointsIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV0EndpointsIdResponse parses an HTTP response from a GetV0EndpointsIdWithResponse call
func ParseGetV0EndpointsIdResponse(rsp *http.Response) (*GetV0EndpointsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0EndpointsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *Endpoint `json:"data,omitempty"`
			Error *string   `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV0EndpointsIdResponse parses an HTTP response from a PatchV0EndpointsIdWithResponse call
func ParsePatchV0EndpointsIdResponse(rsp *http.Response) (*PatchV0EndpointsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV0EndpointsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV0EndpointsIdSecurityDomainMasksResponse parses an HTTP response from a PostV0EndpointsIdSecurityDomainMasksWithResponse call
func ParsePostV0EndpointsIdSecurityDomainMasksResponse(rsp *http.Response) (*PostV0EndpointsIdSecurityDomainMasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsIdSecurityDomainMasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse parses an HTTP response from a DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdWithResponse call
func ParseDeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdSecurityDomainMasksDomainMaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV0EndpointsIdSecurityIpsResponse parses an HTTP response from a PostV0EndpointsIdSecurityIpsWithResponse call
func ParsePostV0EndpointsIdSecurityIpsResponse(rsp *http.Response) (*PostV0EndpointsIdSecurityIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsIdSecurityIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV0EndpointsIdSecurityIpsIpIdResponse parses an HTTP response from a DeleteV0EndpointsIdSecurityIpsIpIdWithResponse call
func ParseDeleteV0EndpointsIdSecurityIpsIpIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdSecurityIpsIpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdSecurityIpsIpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *bool   `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0EndpointsIdSecurityJwtsResponse parses an HTTP response from a PostV0EndpointsIdSecurityJwtsWithResponse call
func ParsePostV0EndpointsIdSecurityJwtsResponse(rsp *http.Response) (*PostV0EndpointsIdSecurityJwtsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsIdSecurityJwtsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV0EndpointsIdSecurityJwtsJwtIdResponse parses an HTTP response from a DeleteV0EndpointsIdSecurityJwtsJwtIdWithResponse call
func ParseDeleteV0EndpointsIdSecurityJwtsJwtIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdSecurityJwtsJwtIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdSecurityJwtsJwtIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV0EndpointsIdSecurityReferrersResponse parses an HTTP response from a PostV0EndpointsIdSecurityReferrersWithResponse call
func ParsePostV0EndpointsIdSecurityReferrersResponse(rsp *http.Response) (*PostV0EndpointsIdSecurityReferrersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsIdSecurityReferrersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV0EndpointsIdSecurityReferrersReferrerIdResponse parses an HTTP response from a DeleteV0EndpointsIdSecurityReferrersReferrerIdWithResponse call
func ParseDeleteV0EndpointsIdSecurityReferrersReferrerIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdSecurityReferrersReferrerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *bool   `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV0EndpointsIdSecurityTokensResponse parses an HTTP response from a PostV0EndpointsIdSecurityTokensWithResponse call
func ParsePostV0EndpointsIdSecurityTokensResponse(rsp *http.Response) (*PostV0EndpointsIdSecurityTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV0EndpointsIdSecurityTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV0EndpointsIdSecurityTokensTokenIdResponse parses an HTTP response from a DeleteV0EndpointsIdSecurityTokensTokenIdWithResponse call
func ParseDeleteV0EndpointsIdSecurityTokensTokenIdResponse(rsp *http.Response) (*DeleteV0EndpointsIdSecurityTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV0EndpointsIdSecurityTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *bool   `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0UsageRpcResponse parses an HTTP response from a GetV0UsageRpcWithResponse call
func ParseGetV0UsageRpcResponse(rsp *http.Response) (*GetV0UsageRpcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0UsageRpcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				CreditsRemaining *int `json:"credits_remaining"`
				CreditsUsed      int  `json:"credits_used"`
				EndTime          int  `json:"end_time"`
				Limit            *int `json:"limit"`
				Overages         *int `json:"overages"`
				StartTime        int  `json:"start_time"`
			} `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0UsageRpcByChainResponse parses an HTTP response from a GetV0UsageRpcByChainWithResponse call
func ParseGetV0UsageRpcByChainResponse(rsp *http.Response) (*GetV0UsageRpcByChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0UsageRpcByChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Chains    *[]ChainUsage `json:"chains,omitempty"`
				EndTime   *int          `json:"end_time,omitempty"`
				StartTime *int          `json:"start_time,omitempty"`
			} `json:"data"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0UsageRpcByEndpointResponse parses an HTTP response from a GetV0UsageRpcByEndpointWithResponse call
func ParseGetV0UsageRpcByEndpointResponse(rsp *http.Response) (*GetV0UsageRpcByEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0UsageRpcByEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				EndTime   *int             `json:"end_time,omitempty"`
				Endpoints *[]EndpointUsage `json:"endpoints,omitempty"`
				StartTime *int             `json:"start_time,omitempty"`
			} `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV0UsageRpcByMethodResponse parses an HTTP response from a GetV0UsageRpcByMethodWithResponse call
func ParseGetV0UsageRpcByMethodResponse(rsp *http.Response) (*GetV0UsageRpcByMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV0UsageRpcByMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				EndTime   *int           `json:"end_time,omitempty"`
				Methods   *[]MethodUsage `json:"methods,omitempty"`
				StartTime *int           `json:"start_time,omitempty"`
			} `json:"data,omitempty"`
			Error *string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaTW/jNhD9KwTboxql7c23/Sy8wAKLze72EAQGLY0tJhLJkKN4DcP/vSD1bUmOZMde",
	"F8glkWXOcDjvPZLmcEMDmSgpQKChkw01QQQJc49BxLiwD0pLBRo5uNcCcCX1g3vmCIl7+F3Dgk7ob37l",
	"zc9d+bkB3XoU1wrohDKt2dp+NnG6tOb5e4OaiyXdVi3l/B4CtE1dNLPUsCW0Ywo0hBzNLDUQ1vxxgbAE",
	"bc0FS2BgTyBCJbnAjm6KjIRgAs0VcinoJHtN3Fg8Cj9ZomLrETCi3m6HHo0Q1SzVcUc0HuVh5+uYzcEZ",
	"iDSO2dy6R51Ch/ci2a0g8y/aYSaMCwHYFaqBINUc188hXGRsVhpsPboypmeYW49qeEy5tmDd2jHn8NIq",
	"/lqeKle1iO72ADcLpR3ULGHmoQ1i9uXw7O+jyIyrdgc9GGZNxzi/X+Fg7w8973t471GVzmMezB5gPTYs",
	"DQvQGvTg2OoGYzqq068LQwfw8Hmokx4dkxJXB/jkqsvV/QoP8GVx73AmnZRNOxsoHyB7n5vMpYyBie70",
	"FmgcEFgJZEd0VRDjfDq7tsO9xMhshtKvbD2Ge30LTdQ3dzy/BA2fxBPASIZmNtfAHkK5EoPTmlnm0Xeg",
	"1Dsd1NaNAWlqdHPAapzbj1iUa/HtbEf6RjR4b1Fb6G5sGjO/c2Aa9JsUo+rTR6kThnRCP/37zS5GrrXV",
	"m/u2WkHt0kW31nEkjW2/Wq2uHlMePAgZwlUgE+pRLhbSxcfRrcNvvkzJj2vq0SfQJluzn64z3YNgitMJ",
	"/fvq+upP6lHFMHJB+k/XvqOk+7QEt17Y7DA7VUxDOqH/AP64fpe1seI3SgqTDfGv62sHlxQI2XaHKRXz",
	"wBn790aKakfYMQczZIN5memmg5CgtdQDRLGzZ3CdF9btvYBt3tz+mDQIwJgM7TRJmF7TCf0IGEQk5gaJ",
	"XJCgyBKypbG95Gm7s0Y21cXs8Ey2P5TNfl3Cy02s1U53ai8Eg6+AmsMTGFKm1yFSw6FK6J3duThN7Wb+",
	"izSt1D+mYPCtDNdHZL1/xh8zZTZzZ7O7PQk3hlLi10L+TgNDMIQRAasS9h7Ad7Xnb3i4zX7fxIDQZsJ7",
	"977GhWno5kzNEkC377ndUIupm0dpsShmv0OaIHm1hO9m5q4bwCHjf6ODiD/BcyP3hswxZx3c5bHzQAbe",
	"RHJFDBfLeAAKimEQdcw49vV5kHiJiazcfg5I4vZwbn9XIUM4SNR+sQ3zd3/fDZryp+FNbv/emX921pcM",
	"yc45xcutIodPwqQeUxs7clMewIzB0N/UPs3Gz98dwFaPp9Gd1+mkOYxzrRdZRgxhgsBPbpCL5QkAy889",
	"Rmptqi5bYwOP3c4hLa6OBsjfcHWEfqbKTNU59eKivYCdx+7B2Dn2GHtVeywXipPFkWr9tMLLluupz7HP",
	"ofP7FR4Prr+5X+ERUrdIf1rhOcWeBXwRi+LREDROyUeK7Gtpe8lKG1WVOVA2RR8kcEoJh+mnjOxlEPQ3",
	"xeMRcioxLR7OKaxa/K9raVvsL8OXqoA1Uu7fMsPLOmLqkRZLMQKBOeQkK429QNr8jft/hMCyLLq/55RW",
	"Efarrtq6GsEOVwn0tQpqlZFm/9MFMcg0zpAnQKS23WTPTANJuDFcLD0SpFqDQDLncWyDUaC5DAk3JDUQ",
	"EiZCosH+4LVf5oVGspCaYARFY+tQA6ZaQHhFva7j0+823q8qaBOtGfWNDZnYMF3Fjk7oYwp6XfGnGhPt",
	"YExZ8rTsa3r+IMJ9fovs7Pd6GiJ2V3PLtO8hZK3E+3wRuBziZEMXRWXVvjDIEkW7nMY84Tisf/kEmi3z",
	"GvGzrWswDo1mpzTSGK/X5EU50s5bSycXeVVhczIlKJHFTjRGQcAXHDIqEs3EEmqCdyrpELk/X/9R1sX6",
	"axSFyN6u3+W3u1619ozWylr+8Kp6/2WPAwR2mA6O4fRJK8oZ361bMl+T4o7hEHrXL4EOYfiHqt7xSvL9",
	"JD+Alo2LF+Pul/Wq4/xUf2E6d5TY9jE6u3M1lM+fs9avbD4Bm/PrfS92qe//zeSllqmC0DI6KUjX4nPj",
	"Mvpt83be7Z0F2oB+Kkjqrp27W3hm4vtM8Z3Ld9u77X8BAAD//5VRexP4MAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
